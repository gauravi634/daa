graph = {
    'A': [('B', 1), ('C', 4)],
    'B': [('A', 1), ('C', 2), ('D', 1)],
    'C': [('A', 4), ('B', 2), ('D', 1)],
    'D': [('B', 5), ('C', 1)]
}

source = 'A'

# Initialize distances to all nodes as infinity except the source
distances = {node: float('inf') for node in graph}
distances[source] = 0

visited = set()

while len(visited) < len(graph):
    min_node = None
    min_distance = float('inf')

    # Find the unvisited node with the smallest distance
    for node in graph:
        if node not in visited and distances[node] < min_distance:
            min_distance = distances[node]
            min_node = node

    if min_node is None:
        break

    visited.add(min_node)

    # Update the distances of neighbors
    for neighbour, weight in graph[min_node]:
        new_distance = distances[min_node] + weight
        if new_distance < distances[neighbour]:
            distances[neighbour] = new_distance

# Print final shortest distances
print()
for node, dist in distances.items():
    print(f"Shortest distance from {source} to {node}: {dist}")
